# -*- coding: utf-8 -*-
import qtawesome
# Form implementation generated from reading ui file 'login.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import Qt, QTimer, QSettings

from PyQt5.QtGui import QPixmap, QFont, QIcon, QPalette, QBrush
from PyQt5.QtWidgets import QDesktopWidget, QLineEdit, QLabel, QFormLayout, QHBoxLayout, QWidget, QPushButton, \
    QGridLayout, QCheckBox, QMessageBox, QTextBrowser, QTextEdit, QSplitter
from PyQt5.QtCore import Qt, QTimer, QDateTime
from PyQt5.QtNetwork import QUdpSocket, QHostAddress, QTcpSocket
from PyQt5.QtWidgets import QApplication, QWidget, QPushButton, QLabel, QVBoxLayout


class MyWidget(QWidget):
    def __init__(self, mode=0):
        super().__init__()
        self.resize(400, 400)

        self.setWindowTitle('摄像头端')

        self.browser = QTextBrowser(self)
        self.splitter = QSplitter(self)
        self.splitter.setOrientation(Qt.Vertical)
        self.splitter.addWidget(self.browser)
        self.splitter.setSizes([350, 100])

        self.start_btn = QPushButton('播放', self)
        self.close_btn = QPushButton('暂停', self)

        self.h_layout = QHBoxLayout()
        self.v_layout = QVBoxLayout()

        # 2
        self.sock = QTcpSocket(self)
        self.sock.connectToHost(QHostAddress.LocalHost, 6666)

        self.layout_init()
        self.signal_init()


    def layout_init(self):
        self.h_layout.addStretch(1)
        self.h_layout.addWidget(self.start_btn)
        self.h_layout.addWidget(self.close_btn)
        self.v_layout.addWidget(self.splitter)
        self.v_layout.addLayout(self.h_layout)
        self.setLayout(self.v_layout)

    def signal_init(self):
        self.start_btn.clicked.connect(self.start_play)  # 3
        self.close_btn.clicked.connect(self.stop_play)  # 4
        self.sock.connected.connect(self.connected_slot)  # 5
        self.sock.readyRead.connect(self.read_data_slot)  # 6

    def start_play(self):
        message = 'start'
        self.browser.append('send: {}'.format(message))
        datagram = message.encode()
        self.sock.write(datagram)

    def connected_slot(self):
        message = '已连接到客户端'
        self.browser.append(message)

    def read_data_slot(self):
        while self.sock.bytesAvailable():
            datagram = self.sock.read(self.sock.bytesAvailable())
            message = datagram.decode()
            self.browser.append('Server: {}'.format(message))

    def stop_play(self):
        message = 'stop'
        self.browser.append('send: {}'.format(message))
        datagram = message.encode()
        self.sock.write(datagram)


    def closeEvent(self, event):
        self.sock.close()
        event.accept()

