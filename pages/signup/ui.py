# -*- coding: utf-8 -*-
import qtawesome
# Form implementation generated from reading ui file 'login.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import Qt, QTimer, QSettings

from PyQt5.QtGui import QPixmap, QFont, QIcon, QPalette, QBrush
from PyQt5.QtWidgets import QDesktopWidget, QLineEdit, QLabel, QFormLayout, QHBoxLayout, QWidget, QPushButton, \
    QGridLayout, QCheckBox, QMessageBox


class Signup(QWidget):
    def __init__(self, parent, mode=0):
        super().__init__()
        self.parent=parent
        self.mode = mode
        self.setWindowTitle('注册账号')
        self.resize(800, 450)
        # self.setFixedSize(self.width(), self.height())
        self.setWindowFlags(Qt.WindowCloseButtonHint)
        palette = QPalette()
        palette.setBrush(QPalette.Background, QBrush(QPixmap("./1.png")))
        self.setPalette(palette)
        ###### 设置界面控件
        self.verticalLayout = QGridLayout(self)
        self.H = QLabel(" ")
        self.verticalLayout.addWidget(self.H, 0, 0, 9, 0)
        self.a = QPushButton(qtawesome.icon('fa.user-circle', color='white'), ":")
        self.verticalLayout.addWidget(self.a, 2, 3, 1, 2)
        self.a.setStyleSheet('''
                                   QPushButton{border:none;color:black;}
                                   QPushButton:hover{color:white}
                                    ''')
        self.lineEdit_account = QLineEdit()
        self.lineEdit_account.setPlaceholderText("请输入账号")
        self.verticalLayout.addWidget(self.lineEdit_account, 2, 4, 1, 3)
        self.lineEdit_account.setStyleSheet(
            '''QLineEdit{
                    border:1px solid gray;
                    width:200px;
                    border-radius:10px;
                    padding:2px 4px;
            }''')

        self.left_close = QtWidgets.QPushButton("")  # 关闭按钮
        self.left_visit = QtWidgets.QPushButton("")  # 空白按钮
        self.left_mini = QtWidgets.QPushButton("")  # 最小化按钮
        self.verticalLayout.addWidget(self.left_mini, 0, 6, 1, 1)
        self.verticalLayout.addWidget(self.left_close, 0, 8, 1, 1)
        self.verticalLayout.addWidget(self.left_visit, 0, 7, 1, 1)
        self.left_close.setFixedSize(15, 15)  # 设置关闭按钮的大小
        self.left_visit.setFixedSize(15, 15)  # 设置最大化按钮大小
        self.left_mini.setFixedSize(15, 15)  # 设置最小化按钮大小
        self.left_close.setStyleSheet(
            '''QPushButton{background:#F76677;border-radius:5px;}QPushButton:hover{background:red;}''')
        self.left_visit.setStyleSheet(
            '''QPushButton{background:#F7D674;border-radius:5px;}QPushButton:hover{background:yellow;}''')
        self.left_mini.setStyleSheet(
            '''QPushButton{background:#6DDF6D;border-radius:5px;}QPushButton:hover{background:green;}''')
        self.a1 = QPushButton(qtawesome.icon('fa.unlock-alt', color='white'), ":")
        self.verticalLayout.addWidget(self.a1, 3, 3, 1, 2)
        self.a1.setStyleSheet('''
                                           QPushButton{border:none;color:black;}
                                           QPushButton:hover{color:white}
                                            ''')
        self.lineEdit_password = QLineEdit()
        self.lineEdit_password.setPlaceholderText("请输入密码")
        self.verticalLayout.addWidget(self.lineEdit_password, 3, 4, 1, 3)
        self.lineEdit_password.setStyleSheet(
            '''QLineEdit{
                    border:1px solid gray;
                    width:200px;
                    border-radius:10px;
                    padding:2px 4px;
            }''')
        self.lineEdit_password.setEchoMode(QLineEdit.Password)
        self.a1 = QPushButton(qtawesome.icon('fa.unlock-alt', color='white'), ":")
        self.verticalLayout.addWidget(self.a1, 4, 3, 1, 2)
        self.a1.setStyleSheet('''
                                           QPushButton{border:none;color:black;}
                                           QPushButton:hover{color:white}
                                            ''')
        self.lineEdit_password1 = QLineEdit()
        self.lineEdit_password1.setPlaceholderText("请再次输入密码")
        self.verticalLayout.addWidget(self.lineEdit_password1, 4, 4, 1, 3)
        self.lineEdit_password1.setStyleSheet(
            '''QLineEdit{
                    border:1px solid gray;
                    width:200px;
                    border-radius:10px;
                    padding:2px 4px;
            }''')
        self.lineEdit_password1.setEchoMode(QLineEdit.Password)

        self.pushButton_quit1 = QPushButton()
        self.pushButton_quit1.setText("注册")
        self.verticalLayout.addWidget(self.pushButton_quit1, 5, 4, 1, 3)
        self.pushButton_quit1.setStyleSheet(
            "QPushButton{color:highlight}"
            "QPushButton:hover{color:white}"
            "QPushButton{background-color:rgb(0,191,255)}"
            "QPushButton{border:2px}"
            "QPushButton{border-radius:10px}"
            "QPushButton{padding:5px 6px}"
            "QPushButton{font-size:14pt}")
        self.pushButton_quit = QPushButton()
        self.pushButton_quit.setText("返回")
        self.verticalLayout.addWidget(self.pushButton_quit, 6, 4, 1, 3)
        self.pushButton_quit.setStyleSheet(
            "QPushButton{color:highlight}"
            "QPushButton:hover{color:white}"
            "QPushButton{background-color:rgb(0,191,255)}"
            "QPushButton{border:2px}"
            "QPushButton{border-radius:10px}"
            "QPushButton{padding:5px 6px}"
            "QPushButton{font-size:14pt}")

        ###### 绑定按钮事件
        self.left_close.clicked.connect(self.close)
        self.pushButton_quit1.clicked.connect(self.on_pushButton_enter_clicked1)
        self.left_mini.clicked.connect(self.showMinimized)
        self.pushButton_quit.clicked.connect(self.back)

    def on_pushButton_enter_clicked1(self):
        account_dict = {}
        f = open("1.txt", 'r+')
        for line in f:
            (keys, value) = line.strip().split()
            account_dict[keys] = value
        account1 = self.lineEdit_account.text()
        password1 = self.lineEdit_password.text()
        password2 = self.lineEdit_password1.text()
        if account1 != "" and password1 != "" and password2 != "":
            if password2 != password1:
                QMessageBox.information(self, '错误', '密码输入错误,请重新确认', QMessageBox.Yes | QMessageBox.No,
                                        QMessageBox.Yes)
            else:
                account_keys = list(account_dict.keys())
                if account1 not in account_keys:
                    f = "1.txt"
                    with open(f, "a") as file:  # 只需要将之前的”w"改为“a"即可，代表追加内
                        file.write(account1 + " " + password1 + "\n")
                    QMessageBox.information(self, '注册成功', '注册成功！', QMessageBox.Yes | QMessageBox.No,
                                            QMessageBox.Yes)
                else:
                    QMessageBox.information(self, '注册失败', '账号已存在！', QMessageBox.Yes | QMessageBox.No,
                                            QMessageBox.Yes)
        else:
            QMessageBox.information(self, '注册失败', '输入不能为空！', QMessageBox.Yes | QMessageBox.No,
                                    QMessageBox.Yes)

    def back(self):
        self.close()
        self.parent.show()

